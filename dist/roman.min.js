/* Roman Numerals vI, Â© 2021 sbgib, MIT License, https://github.com/sbgib/roman-numerals */
((e,r)=>{"function"==typeof define&&define.amd?define([],()=>r(e)):"object"==typeof exports?module.exports=r(e):e.roman=r(e)})("undefined"!=typeof global?global:"undefined"!=typeof window?window:this,e=>{"use strict";const r={I:1,V:5,X:10,L:50,C:100,D:500,M:1e3};let n={read:e=>{let n,t;return"string"!=typeof e||0===e.length?(console.error("Error: String of Roman numerals ("+Object.keys(r).join(", ")+") expected."),null):(e=e.trim(),0<=e.indexOf(" ")&&(e=e.split(" ")[0]),t=e.toUpperCase().split("").reverse().reduce((e,t)=>{let o=r[t];return"number"==typeof o&&(e+=o*(void 0!==n&&o<n?-1:1),n=o),e},0),0!==t?t:(console.warn("Warning: No Roman numerals found."),null))},write:e=>{const n=Object.keys(r);let t,o,l="",i=(e,t)=>{let o,l="",u=t;if(4*r[n[e]]<=u)return null;for(;r[n[e]]<=u;)u-=r[n[e]],l+=n[e];if(0!==u&&0<e){if(o=i(e-1,u),null===o)return t<r[n[e]]?i(e-1,r[n[e]]-u)+n[e]:null;l+=o}return l};if("number"!=typeof e)return console.error("Error: Number input expected."),null;for(t=3;0<=t;t--)o=e-e%Math.pow(10,t),e-=o,l+=i(n.length-1,o);return l},convert:e=>{const r=typeof e;return"number"===r||"string"===r&&/^([\d\.\,]+)$/g.test(e)?n.write(parseInt(e)):"string"===r?n.read(e):(console.error("Error: Unknown input. Number or string expected."),null)},numerals:()=>r,replaceNumerals:(e,t=[])=>"string"!=typeof e||0===e.length?(console.error("Error: String expected."),null):e.replace(new RegExp("(["+Object.keys(r).join("")+"]+)","g"),e=>0<=t.indexOf(e)?e:n.read(e)),replaceNumbers:(e,r=[])=>"string"!=typeof e||0===e.length?(console.error("Error: String expected."),null):e.replace(/(\d+)/g,e=>n.write(parseInt(e))),extractNumerals:(e,t=[])=>{let o;return"string"!=typeof e||0===e.length?(console.error("Error: String expected."),null):(o=e.match(new RegExp("(["+Object.keys(r).join("")+"]+)","g")),o?o.filter(e=>t.indexOf(e)<0).map(e=>n.read(e)):(console.warn("Warning: No Roman numerals found."),null))},extractNumbers:e=>{let r;return"string"!=typeof e||0===e.length?(console.error("Error: String expected."),null):(r=e.match(/(\d+)/g),r?r.map(e=>n.write(parseInt(e))):(console.warn("Warning: No integers found."),null))}};return n});