/* Roman Numerals vI.I, sbgib Â© 2021, MIT License, https://github.com/sbgib/roman-numerals */
const numerals={I:1,V:5,X:10,L:50,C:100,D:500,M:1e3};let patternContains=()=>new RegExp("\\b(["+Object.keys(numerals).join("")+"]+)\\b","gi"),patternIs=()=>new RegExp("^(["+Object.keys(numerals).join("")+"]+)$","gi"),checkArray=e=>Array.isArray(e),checkString=e=>"string"==typeof e&&0!==e.length,checkNumeral=e=>"string"==typeof e&&0!==e.length&&patternIs().test(e),read=e=>{let r,t;return checkNumeral(e)?(e=e.trim(),0<=e.indexOf(" ")&&(e=e.split(" ")[0]),t=e.toUpperCase().split("").reverse().reduce((e,t)=>{let n=numerals[t];return"number"==typeof n&&(e+=n*(void 0!==r&&n<r?-1:1),r=n),e},0),0!==t?t:null):null},write=e=>{const r=Object.keys(numerals);let t,n,l="",a=(e,t)=>{let n,l="",u=t;if(t<1e3&&4*numerals[r[e]]<=u)return null;for(;numerals[r[e]]<=u;)u-=numerals[r[e]],l+=r[e];if(0!==u&&0<e){if(n=a(e-1,u),null===n)return t<numerals[r[e]]?a(e-1,numerals[r[e]]-u)+r[e]:null;l+=n}return l};if("number"!=typeof e||e===1/0)return null;for(t=3;0<=t;t--)n=e-e%Math.pow(10,t),0!==n&&(e-=n,l+=a(r.length-1,n));return l},convert=e=>{const r=typeof e;return"number"===r||"string"===r&&/^([\d]+)/g.test(e)?write(parseInt(e)):"string"===r?read(e):null},check=e=>checkString(e)?patternIs().test(e):null,contains=(e,r=[])=>{let t;return checkString(e)?(t=e.match(patternContains()),!!t&&0<t.filter(e=>r.indexOf(e)<0).length):null},extract=(e,r=[])=>{let t;return checkString(e)&&checkArray(r)?(t=e.match(patternContains()),t||null):null},extractNumerals=(e,r=[])=>{const t=extract(e,r);return t?t.map(e=>read(e)):null},extractNumbers=e=>{let r;return checkString(e)?(r=e.match(/(\d+)/g),r?r.map(e=>write(parseInt(e))):null):null},replaceNumerals=(e,r=[])=>checkString(e)&&checkArray(r)?e.replace(patternContains(),e=>0<=(r.indexOf(e)?e:read(e))):null,replaceNumbers=(e,r=[])=>checkString(e)&&checkArray(r)?e.replace(/(\d+)/g,e=>write(parseInt(e))):null,add=e=>checkArray(e)?write(e.reduce((e,r)=>e+read(r),0)||null):null,subtract=(e,r)=>(e=read(e),r=read(r),null!==e&&null!==r?write(e-r):null),multiply=e=>checkArray(e)&&write(e.reduce((e,r)=>e*read(r),1))||null,divide=(e,r)=>(e=read(e),r=read(r),null!==e&&null!==r?write(Math.floor(e/r)):null);export{numerals,read,write,convert,check,contains,extract,extractNumerals,extractNumbers,replaceNumerals,replaceNumbers,add,subtract,multiply,divide};